# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinaryBzet', [dirname(__file__)])
        except ImportError:
            import _BinaryBzet
            return _BinaryBzet
        if fp is not None:
            try:
                _mod = imp.load_module('_BinaryBzet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BinaryBzet = swig_import_helper()
    del swig_import_helper
else:
    import _BinaryBzet
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinaryBzet.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _BinaryBzet.SwigPyIterator_value(self)
    def incr(self, n = 1): return _BinaryBzet.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _BinaryBzet.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _BinaryBzet.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _BinaryBzet.SwigPyIterator_equal(self, *args)
    def copy(self): return _BinaryBzet.SwigPyIterator_copy(self)
    def next(self): return _BinaryBzet.SwigPyIterator_next(self)
    def __next__(self): return _BinaryBzet.SwigPyIterator___next__(self)
    def previous(self): return _BinaryBzet.SwigPyIterator_previous(self)
    def advance(self, *args): return _BinaryBzet.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _BinaryBzet.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _BinaryBzet.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _BinaryBzet.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _BinaryBzet.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _BinaryBzet.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _BinaryBzet.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _BinaryBzet.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class BinaryBzet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryBzet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryBzet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _BinaryBzet.new_BinaryBzet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BinaryBzet.delete_BinaryBzet
    __del__ = lambda self : None;
    def getBzetString(self): return _BinaryBzet.BinaryBzet_getBzetString(self)
    def getBzetBinaryString(self): return _BinaryBzet.BinaryBzet_getBzetBinaryString(self)
    def getBzetPretty(self): return _BinaryBzet.BinaryBzet_getBzetPretty(self)
    def getCharFromBzet(self, *args): return _BinaryBzet.BinaryBzet_getCharFromBzet(self, *args)
    def isTAWatching(self): return _BinaryBzet.BinaryBzet_isTAWatching(self)
    def __and__(self, *args): return _BinaryBzet.BinaryBzet___and__(self, *args)
    def __or__(self, *args): return _BinaryBzet.BinaryBzet___or__(self, *args)
    def __xor__(self, *args): return _BinaryBzet.BinaryBzet___xor__(self, *args)
    def __eq__(self, *args): return _BinaryBzet.BinaryBzet___eq__(self, *args)
    def __invert__(self): return _BinaryBzet.BinaryBzet___invert__(self)
    def FALSE(self, *args): return _BinaryBzet.BinaryBzet_FALSE(self, *args)
    def AND(self, *args): return _BinaryBzet.BinaryBzet_AND(self, *args)
    def NonImplication(self, *args): return _BinaryBzet.BinaryBzet_NonImplication(self, *args)
    def A(self, *args): return _BinaryBzet.BinaryBzet_A(self, *args)
    def ConverseNonImplication(self, *args): return _BinaryBzet.BinaryBzet_ConverseNonImplication(self, *args)
    def B(self, *args): return _BinaryBzet.BinaryBzet_B(self, *args)
    def XOR(self, *args): return _BinaryBzet.BinaryBzet_XOR(self, *args)
    def OR(self, *args): return _BinaryBzet.BinaryBzet_OR(self, *args)
    def NOR(self, *args): return _BinaryBzet.BinaryBzet_NOR(self, *args)
    def EQ(self, *args): return _BinaryBzet.BinaryBzet_EQ(self, *args)
    def NotB(self, *args): return _BinaryBzet.BinaryBzet_NotB(self, *args)
    def ConverseImplication(self, *args): return _BinaryBzet.BinaryBzet_ConverseImplication(self, *args)
    def NotA(self, *args): return _BinaryBzet.BinaryBzet_NotA(self, *args)
    def Implication(self, *args): return _BinaryBzet.BinaryBzet_Implication(self, *args)
    def NAND(self, *args): return _BinaryBzet.BinaryBzet_NAND(self, *args)
    def TRUE(self, *args): return _BinaryBzet.BinaryBzet_TRUE(self, *args)
    def compare(self, *args): return _BinaryBzet.BinaryBzet_compare(self, *args)
    def leftShift(self, *args): return _BinaryBzet.BinaryBzet_leftShift(self, *args)
    def rightShift(self, *args): return _BinaryBzet.BinaryBzet_rightShift(self, *args)
    def slice(self, *args): return _BinaryBzet.BinaryBzet_slice(self, *args)
    def getDepth(self): return _BinaryBzet.BinaryBzet_getDepth(self)
    def size(self): return _BinaryBzet.BinaryBzet_size(self)
    def test(self, *args): return _BinaryBzet.BinaryBzet_test(self, *args)
    def set(self, *args): return _BinaryBzet.BinaryBzet_set(self, *args)
    def unset(self, *args): return _BinaryBzet.BinaryBzet_unset(self, *args)
    def flip(self, *args): return _BinaryBzet.BinaryBzet_flip(self, *args)
    def clean(self): return _BinaryBzet.BinaryBzet_clean(self)
    def countBits(self): return _BinaryBzet.BinaryBzet_countBits(self)
    def getFirstBit(self): return _BinaryBzet.BinaryBzet_getFirstBit(self)
    def getLastBit(self): return _BinaryBzet.BinaryBzet_getLastBit(self)
    def bitList(self): return _BinaryBzet.BinaryBzet_bitList(self)
    def AlignCompare(self, *args): return _BinaryBzet.BinaryBzet_AlignCompare(self, *args)
    __swig_getmethods__["getLastBitTest"] = lambda x: _BinaryBzet.BinaryBzet_getLastBitTest
    if _newclass:getLastBitTest = staticmethod(_BinaryBzet.BinaryBzet_getLastBitTest)
    def flipTEST(self): return _BinaryBzet.BinaryBzet_flipTEST(self)
    def setTEST(self): return _BinaryBzet.BinaryBzet_setTEST(self)
    def expandTEST(self): return _BinaryBzet.BinaryBzet_expandTEST(self)
    def bzetWalkTEST(self): return _BinaryBzet.BinaryBzet_bzetWalkTEST(self)
    def bitSetCollapseTEST(self): return _BinaryBzet.BinaryBzet_bitSetCollapseTEST(self)
    __swig_getmethods__["testShift"] = lambda x: _BinaryBzet.BinaryBzet_testShift
    if _newclass:testShift = staticmethod(_BinaryBzet.BinaryBzet_testShift)
    def align(self, *args): return _BinaryBzet.BinaryBzet_align(self, *args)
    def bsCopy(self, *args): return _BinaryBzet.BinaryBzet_bsCopy(self, *args)
    def bsNeg(self, *args): return _BinaryBzet.BinaryBzet_bsNeg(self, *args)
    def bzetWalk(self, *args): return _BinaryBzet.BinaryBzet_bzetWalk(self, *args)
    def traversalSkeleton(self, *args): return _BinaryBzet.BinaryBzet_traversalSkeleton(self, *args)
    def doDataOp(self, *args): return _BinaryBzet.BinaryBzet_doDataOp(self, *args)
    def binaryOp(self, *args): return _BinaryBzet.BinaryBzet_binaryOp(self, *args)
BinaryBzet_swigregister = _BinaryBzet.BinaryBzet_swigregister
BinaryBzet_swigregister(BinaryBzet)
cvar = _BinaryBzet.cvar
c_uint_max = cvar.c_uint_max

def BinaryBzet_getLastBitTest():
  return _BinaryBzet.BinaryBzet_getLastBitTest()
BinaryBzet_getLastBitTest = _BinaryBzet.BinaryBzet_getLastBitTest

def BinaryBzet_testShift():
  return _BinaryBzet.BinaryBzet_testShift()
BinaryBzet_testShift = _BinaryBzet.BinaryBzet_testShift

# This file is compatible with both classic and new-style classes.


